<?php

namespace Troiswa\BackBundle\Repository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{

    public function findAllPerso()
    {
        //die("ok")
        //SELECT * == SELECT prod
        /*
        $query= $this->getEntityManager()
        ->createQuery("
        SELECT prod
        FROM WaBackBundle:Produit prod
        ");
        */

        $query= $this->createQueryBuilder("product")
        ->getQuery();

        // die(dump($query->getResult()));
        return $query->getResult();
    }

    public function findPerso($id)
    {

        $query= $this->createQueryBuilder("product")
        ->where('product.id = :idProd')
        ->setParameter("idProd", $id)
        ->getQuery();

        //die(dump($query->getSingleResult()));
        return $query->getSingleResult();



        /*Dans la clause WHERE idProd est une variable qui va contenir la valeur
        parametre id*/

        // _em = getEntityManager()
        /*$query= $this->_em->createQuery("
        SELECT prod
        FROM WaBackBundle:Produit prod

        WHERE prod.id= :idProd
        ")
        ->setParameter("idProd", $id);
        /*
        * permet d'avoir plusieurs arguments
        ->setParameters(
        [
        "idProd" => $id,
        ]
        );
        */

        return $query->getSingleResult();
    }

    public function findAllProdctCategory()
    {

        $query = $this->getEntityManager()
                      ->createQuery(
                          "SELECT prod, cat
                          FROM TroiswaBackBundle:Product prod
                          LEFT JOIN prod.categorie cat
                          "
                      );

        return $query->getResult();
    }


    public function findProductByQuantity($qty = 5)
    {
        //die("ok")
        //SELECT * == SELECT prod

        $query= $this->getEntityManager()
        ->createQuery("
        SELECT prod
        FROM TroiswaBackBundle:Product prod
        WHERE prod.quantity <= :qty
        ")
        ->setParameter('qty', $qty);

        return $query->getResult();
    }

    //Afficher les produits dont la catégorie est "Accueil"
    public function findProductByAccueil($titre)
    {

        $query= $this->getEntityManager()
            ->createQuery("
        SELECT prod
        FROM TroiswaBackBundle:Product prod
        INNER JOIN prod.categorie cat
        WHERE cat.title = :titreValue
        ")
            ->setParameter('titreValue', $titre);

        return $query->getResult();
    }

    //Afficher les produits qui n'ont pas de catégorie
    public function findProductByNoCategorie()
    {

        $query= $this->getEntityManager()
            ->createQuery("
        SELECT prod
        FROM TroiswaBackBundle:Product prod
        WHERE prod.categorie IS NULL
        ");

        return $query->getResult();
    }


    //Afficher les catégories n'ayant pas d'image

    public function findCategorieWithtoutImage($image)
    {

        $query= $this->getEntityManager()
            ->createQuery("
        SELECT prod
        FROM TroiswaBackBundle:Product prod
        WHERE prod.categorie.title ==
        ")
            ->setParameter();

        return $query->getResult();
    }

    public function findProductWithComment($id)
    {

        $query= $this->getEntityManager()
            ->createQuery("
        SELECT prod , com
        FROM TroiswaBackBundle:Product prod
        LEFT JOIN prod.commentaires com
        WHERE prod.id =:idProd
        ")
            ->setParameter('idProd', $id);

        return $query->getSingleResult();
    }

    public function findPage($id)
    {

        $query= $this->getEntityManager()
            ->createQuery("
        SELECT prod
        FROM TroiswaBackBundle:Product prod

        ");


        return $query->getSingleResult();
    }


    public function findProductByIdProduct($idsProduct)
    {
        $query = $this->getEntityManager()->createQuery(
    "
      SELECT prod
      FROM TroiswaBackBundle:Product prod
      WHERE prod.id IN (:ids)
    "
        )->setParameter('ids', $idsProduct);

        return $query->getResult();
    }
/*
    //Afficher la légende de l'image dont la position de la catégorie est la plus élevée

    public function findCategorieWithtoutImage($titre)
    {

        $query= $this->getEntityManager()
            ->createQuery("
        SELECT prod
        FROM TroiswaBackBundle:Product prod
        WHERE prod.categorie.title == NULL AND prod.categorie.marque = :marque
        ")
            ->setParameter();

        return $query->getResult();
    }

    //Afficher l'image de la catégorie dont le l'id du produit est 1 (faire en sorte que l'id soit dynamique)

    public function findCategorieWithtoutImage($titre)
    {

        $query= $this->getEntityManager()
            ->createQuery("
        SELECT prod
        FROM TroiswaBackBundle:Product prod
        WHERE prod.categorie.title == NULL AND prod.categorie.marque = :marque
        ")
            ->setParameter();

        return $query->getResult();
    }

    //Afficher la catégorie dont la légende de l'image est la plus grande

    public function findCategorieWithtoutImage($titre)
    {

        $query= $this->getEntityManager()
            ->createQuery("
        SELECT prod
        FROM TroiswaBackBundle:Product prod
        WHERE prod.categorie.title == NULL AND prod.categorie.marque = :marque
        ")
            ->setParameter();

        return $query->getResult();
    }
*/

}
